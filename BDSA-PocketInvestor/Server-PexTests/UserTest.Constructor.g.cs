// <copyright file="UserTest.Constructor.g.cs" company="Hewlett-Packard">Copyright © Hewlett-Packard 2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using System.Collections.Generic;
using Microsoft.Pex.Framework.Explorable;
using Server;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Server.UserData.Moles;
using Microsoft.Moles.Framework.Behaviors;
using Microsoft.Pex.Engine.Exceptions;

namespace Server.UserData
{
    public partial class UserTest
    {
[TestMethod]
[PexGeneratedBy(typeof(UserTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException794()
{
    try
    {
      User user;
      user = this.Constructor((string)null, 0, default(decimal), 
                              (List<InvestmentData>)null, (byte[])null, (ServerClass)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(UserTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException311()
{
    try
    {
      User user;
      user = this.Constructor("", 0, default(decimal), 
                              (List<InvestmentData>)null, (byte[])null, (ServerClass)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(UserTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException928()
{
    try
    {
      User user;
      user = this.Constructor("\0", 0, default(decimal), 
                              (List<InvestmentData>)null, (byte[])null, (ServerClass)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(UserTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException227()
{
    try
    {
      User user;
      user = this.Constructor("\u0100", 0, default(decimal), 
                              (List<InvestmentData>)null, (byte[])null, (ServerClass)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(UserTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException424()
{
    try
    {
      List<InvestmentData> list;
      User user;
      InvestmentData[] investmentDatas = new InvestmentData[0];
      list = new List<InvestmentData>((IEnumerable<InvestmentData>)investmentDatas);
      user = this.Constructor
                 ("\u0100", 0, default(decimal), list, (byte[])null, (ServerClass)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(UserTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException31()
{
    try
    {
      List<InvestmentData> list;
      User user;
      InvestmentData[] investmentDatas = new InvestmentData[0];
      list = new List<InvestmentData>((IEnumerable<InvestmentData>)investmentDatas);
      byte[] bs = new byte[0];
      user =
        this.Constructor("\u0100", 0, default(decimal), list, bs, (ServerClass)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(UserTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException40()
{
    try
    {
      User user;
      user = this.Constructor("\0\0", 0, default(decimal), 
                              (List<InvestmentData>)null, (byte[])null, (ServerClass)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(UserTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException897()
{
    try
    {
      User user;
      user = this.Constructor("\u0100\u0100", 0, default(decimal), 
                              (List<InvestmentData>)null, (byte[])null, (ServerClass)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
